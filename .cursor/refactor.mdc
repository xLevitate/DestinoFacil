---
description: 
globs: 
alwaysApply: false
---
# Prompt para Implementa√ß√£o de Features - Aplica√ß√£o de Destinos de Viagem

## Contexto do Projeto
Agora que o c√≥digo foi simplificado, preciso implementar as funcionalidades essenciais de forma **inteligente e eficiente**, utilizando servi√ßos prontos como Supabase para reduzir o trabalho de desenvolvimento. O foco √© criar uma aplica√ß√£o **moderna, profissional e funcional** com apenas 4 p√°ginas principais.

## Objetivos da Implementa√ß√£o

### 1. ARQUITETURA INTELIGENTE
- **Use Supabase** para autentica√ß√£o (n√£o fa√ßa do zero)
- **Aproveite APIs gratuitas** para dados reais
- **Implemente cache inteligente** para reduzir chamadas de API
- **Mantenha a simplicidade** da arquitetura atual
- **Use solu√ß√µes prontas** sempre que poss√≠vel

### 2. DESIGN MODERNO E PROFISSIONAL
- **Tema escuro** como padr√£o
- **Shadcn/UI** como biblioteca de componentes obrigat√≥ria
- **Design responsivo** e moderno
- **UX intuitiva** e profissional
- **Anima√ß√µes sutis** e transi√ß√µes suaves
- **Tipografia clara** e hierarquia visual bem definida

## P√°ginas a Implementar (4 p√°ginas total)

### 1. üè† Landing Page Profissional
**Objetivo:** Apresentar a aplica√ß√£o de forma profissional e atrativa

**Componentes necess√°rios:**
- **Hero Section** - T√≠tulo impactante, subt√≠tulo explicativo, CTA para come√ßar
- **Se√ß√£o de Features** - 3-4 principais funcionalidades com √≠cones
- **Se√ß√£o "Como Funciona"** - Processo em 3 passos simples
- **Se√ß√£o de Destinos Populares** - Preview de 3-4 destinos com cards
- **Footer** - Links √∫teis, informa√ß√µes de contato

**Requisitos t√©cnicos:**
- Use **Shadcn/UI** para todos os componentes
- **Tema escuro** elegante
- **Anima√ß√µes on-scroll** sutis
- **Totalmente responsivo**
- **Performance otimizada**

### 2. üîê P√°ginas de Autentica√ß√£o (Login/Signup)
**Objetivo:** Autentica√ß√£o simples e segura via Supabase

**Componentes necess√°rios:**
- **Formul√°rio de Login** - Email, senha, "Lembrar de mim", "Esqueci senha"
- **Formul√°rio de Signup** - Nome, email, senha, confirma√ß√£o
- **Integra√ß√£o Supabase** - Configura√ß√£o completa de auth
- **Valida√ß√£o de formul√°rios** - Mensagens de erro claras
- **Redirecionamento** - Para destinations ap√≥s login

**Requisitos t√©cnicos:**
- **Supabase Auth** totalmente configurado
- **Valida√ß√£o client-side** com feedback visual
- **Estados de loading** durante autentica√ß√£o
- **Tratamento de erros** user-friendly
- **Persist√™ncia de sess√£o**

### 3. üåç P√°gina de Destinos (P√°gina Principal)
**Objetivo:** Exibir destinos com informa√ß√µes completas e √∫teis

**Componentes necess√°rios:**
- **Barra de filtros** - Por regi√£o, pre√ßo, clima, etc.
- **Grid de destinos** - Cards com todas as informa√ß√µes
- **Sistema de busca** - Por nome ou caracter√≠sticas
- **Pagina√ß√£o ou scroll infinito**
- **Sidebar com filtros avan√ßados**

**Informa√ß√µes por destino:**
- **Nome e localiza√ß√£o** (pa√≠s/regi√£o)
- **Imagem principal** (cached para performance)
- **Descri√ß√£o atrativa** (2-3 linhas)
- **Popula√ß√£o** da cidade/regi√£o
- **Indicador de pre√ßo** (üí∞ üí∞üí∞ üí∞üí∞üí∞ sistema visual)
- **Clima atual** e temperatura
- **Melhor √©poca para visitar**
- **Pontos tur√≠sticos principais** (3-4 itens)

**Requisitos t√©cnicos:**
- **Cache de imagens** para evitar recarregamentos
- **Cache de dados** dos destinos (localStorage/sessionStorage)
- **APIs gratuitas** para dados reais:
  - REST Countries API (informa√ß√µes de pa√≠ses)
  - OpenWeatherMap API (clima)
  - Pexels API (imagens de qualidade)
- **Loading states** durante carregamento
- **Filtros funcionais** e responsivos

## Especifica√ß√µes T√©cnicas

### Stack Recomendada
- **Frontend:** React/Next.js (mant√©m simplicidade)
- **UI Library:** Shadcn/UI (obrigat√≥rio)
- **Autentica√ß√£o:** Supabase Auth
- **Styling:** Tailwind CSS (integrado com Shadcn)
- **√çcones:** Lucide React (integrado com Shadcn)

### APIs Gratuitas a Utilizar
- **REST Countries API** - Dados de pa√≠ses (popula√ß√£o, regi√£o, etc.)
- **OpenWeatherMap API** - Clima atual e previs√µes
- **Pexels API** - Imagens de alta qualidade dos destinos
- **Opcional:** WorldBank API para dados econ√¥micos

### Sistema de Cache
- **Imagens:** Cache no localStorage com expira√ß√£o
- **Dados de destinos:** Cache com refresh di√°rio
- **Dados de clima:** Cache com refresh de 6 horas
- **Otimiza√ß√£o:** Lazy loading para imagens

### Design System (Tema Escuro)
- **Cores prim√°rias:** Tons de azul/verde para viagem
- **Background:** Gradientes escuros sutis
- **Cards:** Bordas sutis com shadow elegante
- **Tipografia:** Inter ou similar (leg√≠vel e moderna)
- **Spacing:** Consistente usando sistema Tailwind
- **Hover effects:** Transi√ß√µes suaves de 200-300ms

## Fluxo de Navega√ß√£o

### 1. Usu√°rio N√£o Logado
```
Landing Page ‚Üí Login/Signup ‚Üí Destinations Page
```

### 2. Usu√°rio Logado
```
Destinations Page (p√°gina inicial) ‚áÑ Outras funcionalidades
```

### 3. Navega√ß√£o
- **Header fixo** com logo, navega√ß√£o e bot√£o de login/perfil
- **Breadcrumbs** quando necess√°rio
- **Mobile menu** responsivo

## Diretrizes de Implementa√ß√£o

### UX/UI Priorities
1. **Clareza visual** - Informa√ß√µes organizadas e f√°ceis de encontrar
2. **Velocidade** - Carregamento r√°pido com cache inteligente
3. **Responsividade** - Perfeito em mobile, tablet e desktop
4. **Acessibilidade b√°sica** - Contraste adequado, alt texts
5. **Feedback visual** - Estados de hover, loading, erro

### Desenvolvimento Eficiente
1. **Use Shadcn/UI** para todos os componentes poss√≠veis
2. **Reutilize componentes** - Crie um design system interno
3. **Implemente cache** desde o in√≠cio
4. **Teste responsividade** em diferentes tamanhos
5. **Configure Supabase** antes de criar as p√°ginas de auth

### Performance
- **Lazy loading** para imagens
- **Code splitting** por p√°ginas
- **Compress√£o de imagens** autom√°tica
- **Minifica√ß√£o** de CSS/JS
- **Cache headers** apropriados

## Crit√©rios de Sucesso

### Funcionalidade
- [ ] **4 p√°ginas funcionais** e naveg√°veis
- [ ] **Autentica√ß√£o Supabase** funcionando perfeitamente
- [ ] **Dados reais** dos destinos carregando
- [ ] **Cache funcionando** - sem chamadas desnecess√°rias
- [ ] **Filtros e busca** operacionais

### Design
- [ ] **Tema escuro** consistente e elegante
- [ ] **Shadcn/UI** implementado em todos os componentes
- [ ] **Totalmente responsivo** em todos os devices
- [ ] **Anima√ß√µes suaves** e profissionais
- [ ] **Tipografia e spacing** consistentes

### Performance
- [ ] **Carregamento r√°pido** (< 3s primeira visita)
- [ ] **Cache eficiente** (< 1s visitas subsequentes)
- [ ] **Imagens otimizadas** e lazy loading
- [ ] **Sem erros de console** ou warnings

## Instru√ß√µes de Execu√ß√£o

### Fase 1: Setup e Configura√ß√£o
1. **Configure Supabase** projeto e authentication
2. **Configure APIs** (OpenWeather, Unsplash, REST Countries)
3. **Setup Shadcn/UI** com tema escuro personalizado
4. **Crie estrutura** de pastas organizada

### Fase 2: Implementa√ß√£o das P√°ginas
1. **Landing Page** - Foque na primeira impress√£o
2. **Auth Pages** - Integra√ß√£o Supabase completa
3. **Destinations Page** - Cora√ß√£o da aplica√ß√£o
4. **Navega√ß√£o e routing** - Fluxo completo

### Fase 3: Polimento e Otimiza√ß√£o
1. **Implemente cache** inteligente
2. **Teste responsividade** completa
3. **Otimize performance** e carregamento
4. **Ajustes finais** de UX/UI

**IMPORTANTE:** Foque em criar uma experi√™ncia **profissional e moderna** que pare√ßa um produto real, n√£o um projeto de faculdade. Use todas as ferramentas dispon√≠veis (Supabase, Shadcn/UI, APIs gratuitas) para minimizar o trabalho manual e maximizar a qualidade do resultado final.

Quero que voce use Context7 MCP para pegar documentacao atualizada em bibliotecas que voce adicionar, use Tavily MCP para pesquisar sobre APIs, e use o Supabase MCP para criar um projeto para esse projeto, e fazer tudo necessario para o banco de dados e autenticacao.